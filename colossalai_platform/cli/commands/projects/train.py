import os
import argparse
import types
from patch import patch_platform_specific_dependencies

# Please do not remove this call,
# the platform's runtime environment needs it.
patch_platform_specific_dependencies()

# ===================================================================
# Example code generated by ColossalAI-Platform-CLI.
#
# Modify it to fit your needs.
# ===================================================================


def parse_args(parser: argparse.ArgumentParser):
    # required arguments
    parser.add_argument(
        "--epoch",
        type=int,
        required=True,
        help="The training epoch.",
    )
    parser.add_argument(
        "--project_dir",
        type=str,
        required=True,
        help="The directory contains the project code.",
    )
    parser.add_argument(
        "--dataset_dir",
        type=str,
        required=True,
        help="The directory contains the training dataset.",
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        required=True,
        help="The directory project would write output into.",
    )

    # optional arguments, add more if you need
    parser.add_argument(
        "--model_dir",
        type=str,
        default=None,
        help="The directory contains the model to finetune.",
    )
    return parser.parse_args()


def main():
    parser = argparse.ArgumentParser(description="training script")
    args = parse_args(parser)

    # There are some path conventions:
    #
    # $OUTPUT_DIR/tensorboard:
    #     The platform-builtin tensorboard expects events to be here.
    # $OUTPUT_DIR/checkpoint
    #     The platform-builtin checkpoint recovery feature
    #     expects the checkpoint to be here.
    tensorboard_dir = os.path.join(args.output_dir, "tensorboard")
    os.mkdir(tensorboard_dir, exist_ok=True)
    checkpoint_dir = os.path.join(args.output_dir, "checkpoint")
    os.mkdir(checkpoint_dir, exist_ok=True)

    # TODO: your training code here


if __name__ == "__main__":
    main()
